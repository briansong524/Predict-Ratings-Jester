{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy.io import loadmat\n",
    "from scipy.sparse import coo_matrix\n",
    "from sklearn.preprocessing import Imputer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "from predictive_imputer import PredictiveImputer\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.8360188  0.11314284 0.05083836]\n"
     ]
    }
   ],
   "source": [
    "def eucl_dist(x,y):\n",
    "    return np.sqrt(np.sum(np.square(x-y)))    \n",
    "\n",
    "def softmax(x):\n",
    "    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n",
    "    e_x = np.exp(x - np.max(x))\n",
    "    return e_x / e_x.sum()\n",
    "\n",
    "scores = [3.0, 1.0, 0.2]\n",
    "print(softmax(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_mat = loadmat('/home/bsong/kaggle_uci/kaggle77b_trainset.mat')\n",
    "test_mat = loadmat('/home/bsong/kaggle_uci/kaggle77b_testset.mat')\n",
    "\n",
    "train = np.array(train_mat['trainset'])\n",
    "test = np.array(test_mat['testset'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((21983, 100), (3000, 100))\n"
     ]
    }
   ],
   "source": [
    "print(train.shape, test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "train[train==99] = np.NaN\n",
    "test[test==99] = np.NaN\n",
    "\n",
    "coor_test_pred_vals = np.where(test == 55)\n",
    "test[test==55] = np.NaN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n# impute with rf using predictive_imputer\\nimp = PredictiveImputer()\\nimp.fit(train)\\ntrain = imp.transform(train)\\n'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# impute with mean \n",
    "\n",
    "imp = Imputer(missing_values='NaN', strategy='mean', axis=0)\n",
    "imp_fit = imp.fit(train)\n",
    "train = imp.transform(train)\n",
    "\n",
    "\n",
    "# impute with knn (using fancyimpute package)\n",
    "#train = KNN(k=3).complete(train)\n",
    "'''\n",
    "# impute with rf using predictive_imputer\n",
    "imp = PredictiveImputer()\n",
    "imp.fit(train)\n",
    "train = imp.transform(train)\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "coor_notnan_test = np.where(~np.isnan(test)) # tuple of ((x1,x2,...xn),(y1,y2,...,yn))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "cannot reshape array of size 8800 into shape (1,200)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-11-9611fe13f845>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0;31m# any variables with '_abs' at the end represents the variables used for the absolute similar results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m     \u001b[0mweights_users\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0muser_cos_simil\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msimil_inds\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m     \u001b[0mweights_users_abs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0muser_cos_simil\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msimil_inds_abs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: cannot reshape array of size 8800 into shape (1,200)"
     ]
    }
   ],
   "source": [
    "pred_mat = np.array([[0,0,0]*3000]).reshape(-1,3).astype(float)\n",
    "k=200\n",
    "\n",
    "for user in range(3000):\n",
    "    #user = 10\n",
    "    #get inds of user i and items that are not NaN\n",
    "    user_chunk = np.where(coor_notnan_test[0] == user) \n",
    "    user_notnan_ind = coor_notnan_test[1][user_chunk]\n",
    "\n",
    "    #get inds of items j that are for predicting\n",
    "    pred_item_chunk = np.where(coor_test_pred_vals[0] == user)\n",
    "    pred_item_ind = coor_test_pred_vals[1][pred_item_chunk]\n",
    "\n",
    "    #find 10 similar users in train\n",
    "    #user_cos_simil = cosine_similarity(test[user,user_notnan_ind].reshape(1,-1), train[:,user_notnan_ind])\n",
    "    \n",
    "    simil_inds = np.squeeze(np.argsort(-user_cos_simil))[:k] #\n",
    "    simil_inds_abs = np.squeeze(np.argsort(-np.abs(user_cos_simil)))[:k] # absolute max\n",
    "\n",
    "    #filter train set to just similar users \n",
    "    train_short_col = train[:, pred_item_ind]\n",
    "    train_short_rowcol = train_short_col[simil_inds,:].copy() \n",
    "    train_short_rowcol_abs = train_short_col[simil_inds_abs,:].copy()\n",
    "\n",
    "    #find weighted mean rating of item j for user i \n",
    "    # any variables with '_abs' at the end represents the variables used for the absolute similar results  \n",
    "    \n",
    "    weights_users = user_cos_simil[0,simil_inds].reshape(1,k)\n",
    "    weights_users_abs = user_cos_simil[0,simil_inds_abs].reshape(1,k)\n",
    "\n",
    "    #get a matrix of +1/-1 to multiply with weights that lose signs when obtaining softmax \n",
    "    weights_users_ones = weights_users_abs.copy()\n",
    "    weights_users_ones[weights_users_ones < 0] = -1\n",
    "    weights_users_ones[weights_users_ones > 0] = 1\n",
    "\n",
    "    soft_weights = softmax(weights_users)#*weights_users_ones\n",
    "    soft_weights_abs = softmax(np.abs(weights_users_abs))*weights_users_ones\n",
    "\n",
    "    preds_notabs = np.matmul(soft_weights,train_short_rowcol)\n",
    "    preds_abs = np.matmul(soft_weights_abs, train_short_rowcol_abs)\n",
    "\n",
    "    preds = np.mean(np.array([preds_notabs,preds_abs]), axis = 0 )\n",
    "\n",
    "    # append to matrix\n",
    "    pred_mat[user,:] = preds\n",
    "    \n",
    "    if (user+1)%100 == 0:\n",
    "        print('Done with ' + str(user+1) + ' users.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "euc_distances = [eucl_dist(test[user,user_notnan_ind].reshape(1,-1),i) for i in train[:,user_notnan_ind]]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[60.62769927504638,\n",
       " 40.32134794373819,\n",
       " 34.65304774227715,\n",
       " 45.76053597667841,\n",
       " 33.77050179502226,\n",
       " ...]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "euc_distances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_mat[:6,]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_df = pd.DataFrame({'UserId':[i for i in range(1,3001)],'Rating1':pred_mat[:,0],'Rating2':pred_mat[:,1],'Rating3':pred_mat[:,2]})\n",
    "pred_df=pred_df[['UserId','Rating1','Rating2','Rating3']]\n",
    "pred_df.to_csv('/home/bsong/kaggle_uci/predictions.csv',index = False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python venv_py2",
   "language": "python",
   "name": "venv_py2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
